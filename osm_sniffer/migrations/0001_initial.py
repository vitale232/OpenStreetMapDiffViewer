# Generated by Django 2.2.5 on 2020-02-05 14:12

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MilepointRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_id', models.CharField(max_length=9)),
                ('from_date', models.DateTimeField()),
                ('to_date', models.DateTimeField(null=True)),
                ('dot_id', models.CharField(max_length=6)),
                ('county_order', models.IntegerField()),
                ('route_number', models.CharField(blank=True, max_length=3)),
                ('edited_date', models.DateTimeField(null=True)),
                ('edited_by', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(null=True)),
                ('created_by', models.CharField(max_length=100)),
                ('global_id', models.CharField(max_length=100)),
                ('conc_hierarchy', models.IntegerField()),
                ('the_geom', django.contrib.gis.db.models.fields.MultiLineStringField(srid=26918)),
                ('direction', models.IntegerField(choices=[(0, '0 - Primary Direction with Undivided Inventory'), (1, '1 - Primary Direction with Divided Inventory'), (2, '2 - Reverse Direction with Divided Inventory'), (3, '3 - Reverse Direction with No Inventory')])),
                ('roadway_signing', models.IntegerField(choices=[(1, 'I'), (2, 'US'), (3, 'NY'), (-9999, '')], null=True)),
                ('roadway_type', models.IntegerField(choices=[(1, 'Road'), (2, 'Ramp'), (3, 'Route'), (5, 'Non-Mainline')], default=1)),
                ('county', models.IntegerField(choices=[(1, 'Albany'), (2, 'Allegany'), (3, 'Bronx'), (4, 'Broome'), (5, 'Cattaraugus'), (6, 'Cayuga'), (7, 'Chautauqua'), (8, 'Chemung'), (9, 'Chenango'), (10, 'Clinton'), (11, 'Columbia'), (12, 'Cortland'), (13, 'Delaware'), (14, 'Dutchess'), (15, 'Erie'), (16, 'Essex'), (17, 'Franklin'), (18, 'Fulton'), (19, 'Genesee'), (20, 'Greene'), (21, 'Hamilton'), (22, 'Herkimer'), (23, 'Jefferson'), (24, 'Kings'), (25, 'Lewis'), (26, 'Livingston'), (27, 'Madison'), (28, 'Monroe'), (29, 'Montgomery'), (30, 'Nassau'), (31, 'New York'), (32, 'Niagara'), (33, 'Oneida'), (34, 'Onondaga'), (35, 'Ontario'), (36, 'Orange'), (37, 'Orleans'), (38, 'Oswego'), (39, 'Otsego'), (40, 'Putnam'), (41, 'Queens'), (42, 'Rensselaer'), (43, 'Richmond'), (44, 'Rockland'), (45, 'St Lawrence'), (46, 'Saratoga'), (47, 'Schenectady'), (48, 'Schoharie'), (49, 'Schuyler'), (50, 'Seneca'), (51, 'Steuben'), (52, 'Suffolk'), (53, 'Sullivan'), (54, 'Tioga'), (55, 'Tompkins'), (56, 'Ulster'), (57, 'Warren'), (58, 'Washington'), (59, 'Wayne'), (60, 'Westchester'), (61, 'Wyoming'), (62, 'Yates')])),
                ('route_qualifier', models.IntegerField(choices=[(1, 'Alternate'), (2, 'Business Route'), (3, 'Bypass'), (4, 'Spur'), (5, 'Loop'), (6, 'Proposed'), (7, 'Temporary'), (8, 'Truck Route'), (9, 'None of the Above'), (10, 'No Qualifier')], default=10)),
                ('roadway_feature', models.IntegerField(choices=[(1, 'Welcome Center'), (2, 'Rest Area (With Restrooms)'), (3, 'Parking Area (Without Restrooms'), (4, 'Scenic Area'), (5, 'Slip Ramp'), (6, 'Roundabout'), (None, 'None')], null=True)),
                ('parkway_flag', models.CharField(choices=[('Yes', 'Parkway'), ('No', 'Not a Parkway')], default='No', max_length=3)),
                ('route_suffix', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z'), ('0', ''), ('', '')], max_length=4)),
                ('model_created_date', models.DateTimeField(auto_now_add=True)),
                ('model_edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='OsmDiff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diff_id', models.IntegerField()),
                ('osm_id', models.BigIntegerField()),
                ('tags', django.contrib.postgres.fields.hstore.HStoreField()),
                ('meta', django.contrib.postgres.fields.hstore.HStoreField()),
                ('tainted', models.BooleanField()),
                ('type', models.IntegerField(choices=[(0, 'Way'), (1, 'Node'), (3, 'Relation'), (10, 'Undefined')], default=10)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('the_geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='OsmDiffBuffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diff_id', models.IntegerField()),
                ('created_date', models.DateField(auto_now_add=True)),
                ('the_geom', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
            ],
        ),
    ]
